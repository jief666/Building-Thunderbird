#!/bin/bash
SCRIPT_ABS_FILENAME=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "${BASH_SOURCE[0]:-${(%):-%x}}"`
SCRIPT_DIR=`dirname "$SCRIPT_ABS_FILENAME"`
#to copy/paste cmds in terminal (for debug purpose?), do this before : SCRIPT_DIR=$(pwd)

#set -x

#HOMEBREW_BREW_GIT_SHA="master"
#HOMEBREW_CORE_GIT_SHA="master"
#HOMEBREW_CASK_GIT_SHA="master"

function do_it()
{

    . "$SCRIPT_DIR"/"Build on macOS env"

    mkdir -p "$OFFLINE_DIR" || return 1

    if ! [ -f "$HOMEBREW_PREFIX"/Homebrew/bin/brew ]
    then
        if [ -f "$OFFLINE_DIR"/$HOMEBREW_BACKUP_BASENAME.zip ]
        then
            unzip -d "$SCRIPT_DIR" "$OFFLINE_DIR"/$HOMEBREW_BACKUP_BASENAME.zip  ||  return 1
        else
        (

            mkdir -p "${HOMEBREW_REPOSITORY}"
            cd "${HOMEBREW_REPOSITORY}" >/dev/null || return 1

            directories=(bin etc include lib sbin share var opt
                         share/zsh share/zsh/site-functions
                         var/homebrew var/homebrew/linked
                         Cellar)
            mkdirs=()
            for dir in "${directories[@]}"; do
              if ! [[ -d "${HOMEBREW_PREFIX}/${dir}" ]]; then
                mkdir -p "${HOMEBREW_PREFIX}/${dir}"
              fi
            done
            mkdir -p "$HOMEBREW_LOGS"
            rm -rf "$HOMEBREW_CACHE" # just in case


            if ! [ -d .git ]
            then
                echo "========>" fetch "${HOMEBREW_BREW_GIT_REMOTE}"

                # we do it in four steps to avoid merge errors when reinstalling
                "git" "init" "-q" || return 1
                # "git remote add" will fail if the remote is defined in the global config
                "git" "config" "remote.origin.url" "${HOMEBREW_BREW_GIT_REMOTE}" || return 1
                "git" "config" "remote.origin.fetch" "+refs/heads/*:refs/remotes/origin/*" || return 1
                # ensure we don't munge line endings on checkout
                "git" "config" "core.autocrlf" "false" || return 1

                "git" "fetch" "--depth=1" "origin" $HOMEBREW_BREW_GIT_SHA || return 1
                "git" "checkout" $HOMEBREW_BREW_GIT_SHA || return 1
                git remote remove origin || return 1
                ln -sf ../Homebrew/bin/brew "$HOMEBREW_PREFIX/bin/brew"
            fi


            if ! [ -d "$HOMEBREW_CORE" ]
            then
            (
                "/bin/mkdir" "-p" "$HOMEBREW_CORE"
                cd "$HOMEBREW_CORE" >/dev/null  || return 1

                echo "========>" fetch "${HOMEBREW_CORE_GIT_REMOTE}"
                "git" "init" "-q" || return 1
                "git" "config" "remote.origin.url" "${HOMEBREW_CORE_GIT_REMOTE}" || return 1
                "git" "config" "remote.origin.fetch" "+refs/heads/*:refs/remotes/origin/*" || return 1
                "git" "config" "core.autocrlf" "false" || return 1
                "git" "fetch" "--depth=1" "origin" "$HOMEBREW_CORE_GIT_SHA" || return 1
                "git" "checkout" "$HOMEBREW_CORE_GIT_SHA" || return 1
                git remote remove origin || return 1
                # easy access to core formulae. Just for debug, not needed at all
                ln -s ./Homebrew/Library/Taps/homebrew/homebrew-core/Formula/ "$HOMEBREW_PREFIX"/formulae-core
                # disable test to save some time, but works if you make them
                sed -i "" 's/ system "make", "test"/#system "make", "test"/' "$HOMEBREW_CORE"/Formula/o/openssl@1.1.rb || return 1
                sed -i "" 's/ system "make", "test"/#system "make", "test"/' "$HOMEBREW_CORE"/Formula/o/openssl@3.0.rb || return 1
                sed -i "" 's/ system "make", "test"/#system "make", "test"/' "$HOMEBREW_CORE"/Formula/o/openssl@3.rb || return 1

            ) || return 1
            fi

            ( cd "$(dirname "$HOMEBREW_PREFIX")" && zip --symlinks -r "$OFFLINE_DIR"/$HOMEBREW_BACKUP_BASENAME.zip "$(basename "$HOMEBREW_PREFIX")" ) || return 1

        ) || return 1
        fi

    fi

    if ! [ -d "${HOMEBREW_CACHE}" ]
    then
        if [ -f "$OFFLINE_DIR"/$HOMEBREW_CACHE_BACKUP_BASENAME.zip ]
        then
            unzip -d "$(dirname "$HOMEBREW_CACHE")" "$OFFLINE_DIR"/$HOMEBREW_CACHE_BACKUP_BASENAME.zip  ||  return 1
        fi
    fi

}

do_it "$@"
