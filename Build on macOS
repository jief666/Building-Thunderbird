#!/bin/bash
SCRIPT_ABS_FILENAME=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "${BASH_SOURCE[0]:-${(%):-%x}}"`
SCRIPT_DIR=`dirname "$SCRIPT_ABS_FILENAME"`
#to copy/paste cmds in terminal (for debug purpose?), do this before : SCRIPT_DIR=$(pwd)

#echo SCRIPT_DIR=$SCRIPT_DIR

#This script can be sourced, so you'll keep env vars and you'll be able to launch compilation by using ./mach run

set -o pipefail
#set -x

# brew install --build-from-source doesn't apply to dependencies.
# So we have to install them one by one.
function brew_install()
{
    echo '===============>' brew_install check installation of $1
    local dependency
    for dependency in $(brew deps --include-build -n "$1") # All dependencies are listed, including dependencies of dependencies
    do
        if ! [ -d "$HOMEBREW_CELLAR"/"$(basename "$dependency")" ]
        then
            echo '===============>' brew install $1 dependency \: $dependency
            brew install -d -v $dependency  ||  return 1
        fi
    done
    if ! [ -d "$HOMEBREW_CELLAR"/"$(basename "$1")" ]
    then
        echo '===============>' brew install -d -v $1
        brew install -d -v $1  ||  return 1
    fi
}

function brew_fetch()
{
        echo '===============>' brew_fetch $1
        local dependency
        for dependency in $(brew deps --include-build -n "$1")
        do
            echo '===============>' $1 dependency $dependency
            brew fetch $dependency  ||  return 1
        done
        brew fetch $1  ||  return 1
}

#Everything in put in a function so return will work even if this script is not sourced
function do_it()
{
    cd "$SCRIPT_DIR"
    
  #Setup env
    source "./Build on macOS env"
    #echo PATH=$PATH


    if ! [ -z $1 ]
    then
        if [ "$1" = "debug" ]
        then
            CONF=debug
        else
            if [ "$1" = "release" ]
            then
                CONF=release
            else
                echo Usage : '"Build on macOS" [debug|release]'
                return 1
            fi
        fi
    else
        CONF=debug
    fi

#TODO before : Install Xcode in default location (/Applications). Run Xcode to agree license and finish setup.
    if ! [ -d /Applications/Xcode.app ]
        then
        echo Install Xcode in default location \(/Applications\). Don\'t forget to run Xcode once to agree license and finish setup.
        return 1
    fi

#Select Xcode tools (looks like installing the above packages re-select it anyway, but just in case) :
    if ! [ $(xcode-select -p) = "/Applications/Xcode.app/Contents/Developer" ]
    then
        echo Setting command line tools to /Applications/Xcode.app/Contents/Developer. You might need to enter the root password
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer || return 1
    fi


#Check if Xcode was launched at least once
    if ! xcodebuild -checkFirstLaunchStatus
    then
        echo run Xcode once to agree license and finish setup
        return 1
    fi

#Check that command line tools are installed
    if ! [ -f /Library/Developer/CommandLineTools/usr/bin/clang ]
    then
        sudo xcode-select --install
        echo restart this script when command line are installed
        return 2
    fi

#offline dir
    if ! [ -d "$OFFLINE_DIR" ]
    then
        mkdir "$OFFLINE_DIR"  ||  return 1
    fi

#Install brew :

    ./"Build on macOS install local_brew" || return 1

#        if ! [ -f "$HOMEBREW_PREFIX"/etc/ca-certificates/cert.pem ]
#        then
#            mkdir -p "$HOMEBREW_PREFIX"/etc/ca-certificates
#            curl -k https://curl.se/ca/cacert-2023-12-12.pem -o "$HOMEBREW_PREFIX"/etc/ca-certificates/cert.pem
#        sed -i.bak 's|args = \["--location", "--remote-time", "--output", destination, \*args\]|args = ["--cacert", "#{HOMEBREW_PREFIX}/etc/ca-certificates/cert.pem", "--location", "--remote-time", "--output", destination, *args]|' "$HOMEBREW_PREFIX"/Homebrew/Library/Homebrew/utils/curl.rb
#        fi


    rm -rf "$HOMEBREW_CACHE"/downloads/*.incomplete # I had some errors when trying to restart an incomplete download

    [ $(ls -1q "$HOMEBREW_CACHE"/rust* | wc -l) -ge 1 ] || brew_fetch rust  ||  return 1

    # A popup might appear during installation/compilation: "To use the 'java' command-line tool you need to install a JDK" will appear. Don't know why. No need for java, works fine without. 2021-07 : not anymore. 2024-02 : it's back, it happens again.

    [ $(ls -1q "$HOMEBREW_CACHE"/node* | wc -l) -ge 1 ] || brew_fetch node  ||  return 1
    [ $(ls -1q "$HOMEBREW_CACHE"/nasm* | wc -l) -ge 1 ] || brew_fetch nasm  ||  return 1
    [ $(ls -1q "$HOMEBREW_CACHE"/llvm* | wc -l) -ge 1 ] || brew_fetch llvm  ||  return 1

    if ! [ -f "$OFFLINE_DIR"/$HOMEBREW_CACHE_BACKUP_BASENAME.zip ]
    then
        ( cd "$(dirname "$HOMEBREW_CACHE")" && zip --symlinks -r "$OFFLINE_DIR"/$HOMEBREW_CACHE_BACKUP_BASENAME.zip "$(basename "$HOMEBREW_CACHE")" ) || return 1
    fi

    if ! [ -d "$HOMEBREW_PREFIX"/Cellar/rust ]; then
        brew_install rust  ||  return 1
    fi
    if ! [ -f "$RUSTUP_HOME"/bin/cbindgen ]
    then
        if ! [ -f "$OFFLINE_DIR"/cbindgen-$CBINDGEN_VERSION ]
        then
            cargo install --version $CBINDGEN_VERSION cbindgen  ||  return 1
            cp "$RUSTUP_HOME"/bin/cbindgen "$OFFLINE_DIR"/cbindgen-$CBINDGEN_VERSION 
        else
            cp "$OFFLINE_DIR"/cbindgen-$CBINDGEN_VERSION "$RUSTUP_HOME"/bin/cbindgen
        fi
    fi

    if ! [ -d "$HOMEBREW_PREFIX"/Cellar/node ]; then
        brew_install node  ||  return 1
    fi
    
    if ! [ -d "$HOMEBREW_PREFIX"/Cellar/nasm ]; then
        brew_install nasm  ||  return 1
    fi

    if ! [ -d "$HOMEBREW_PREFIX"/Cellar/llvm ]; then
        brew_install llvm  ||  return 1
    fi

    # A popup might appear : "To use the 'java' command-line tool you need to install a JDK" will appear. Don't know why. No need for java, works fine without. 2021-07 : not anymore. 2024-02 : it's back, it happens again.

#Checks

    if which -s rustc
    then
        if ! [ $(which rustc) = "$RUSTUP_HOME"/bin/rustc ]
        then
            echo rustc found in \'$(which rustc)\' instead of \'"$RUSTUP_HOME"/bin\'. Not sure if it\'s right or wrong. Disable current rustc and restart, or comment out next line.
            return 1
        fi
    else
        echo rustc not found. Did \"curl https://sh.rustup.rs -sSf \| bash -s -- -y --no-modify-path\" work ?
        return 1
    fi

#macOS SDK
    if ! [ -d ./MacOSX"$MACOS_SDK_VERSION".sdk ]
    then
        if ! [ -f "$OFFLINE_DIR"/MacOSX"$MACOS_SDK_VERSION".sdk.tar.xz ]
        then
            rm -rf "$OFFLINE_DIR"/MacOSX"$MACOS_SDK_VERSION".sdk.tar.xz.downloading
	        curl -fL https://github.com/joseluisq/macosx-sdks/releases/download/"$MACOS_SDK_VERSION"/MacOSX"$MACOS_SDK_VERSION".sdk.tar.xz -o "$OFFLINE_DIR"/MacOSX"$MACOS_SDK_VERSION".sdk.tar.xz.downloading  ||  return 1
            mv "$OFFLINE_DIR"/MacOSX"$MACOS_SDK_VERSION".sdk.tar.xz.downloading "$OFFLINE_DIR"/MacOSX"$MACOS_SDK_VERSION".sdk.tar.xz  ||  return 1
        fi
        rm -rf ./MacOSX"$MACOS_SDK_VERSION".sdk.untar
        mkdir ./MacOSX"$MACOS_SDK_VERSION".sdk.untar  ||  return 1
        tar xzf "$OFFLINE_DIR"/MacOSX"$MACOS_SDK_VERSION".sdk.tar.xz --strip-components 1 -C ./MacOSX"$MACOS_SDK_VERSION".sdk.untar  ||  return 1
        mv ./MacOSX"$MACOS_SDK_VERSION".sdk.untar ./MacOSX"$MACOS_SDK_VERSION".sdk  ||  return 1
    fi


#  Thunderbird source
    if ! [ -d ./thunderbird-$THUNDERBIRD_VERSION ]
    then
        if ! [ -f "$OFFLINE_DIR"/thunderbird-$THUNDERBIRD_VERSION.source.tar.xz ]
        then
	        curl -f https://archive.mozilla.org/pub/thunderbird/releases/$THUNDERBIRD_VERSION/source/thunderbird-$THUNDERBIRD_VERSION.source.tar.xz -o "$OFFLINE_DIR"/thunderbird-$THUNDERBIRD_VERSION.source.tar.xz.downloading  ||  return 1
            mv "$OFFLINE_DIR"/thunderbird-$THUNDERBIRD_VERSION.source.tar.xz.downloading "$OFFLINE_DIR"/thunderbird-$THUNDERBIRD_VERSION.source.tar.xz  ||  return 1
        fi
        rm -rf ./thunderbird-$THUNDERBIRD_VERSION.untar
        mkdir ./thunderbird-$THUNDERBIRD_VERSION.untar  ||  return 1
        tar xzf "$OFFLINE_DIR"/thunderbird-$THUNDERBIRD_VERSION.source.tar.xz --strip-components 1 -C ./thunderbird-$THUNDERBIRD_VERSION.untar  ||  return 1
        mv ./thunderbird-$THUNDERBIRD_VERSION.untar ./thunderbird-$THUNDERBIRD_VERSION

        # toolchain.configure cannot find the linker kind because toolchain.configure:1782 is expecting "Logging ld64 options" to be displayed in stderr. Not working in Ventura so I'm forcing it.
        sed -i.bak 's|if retcode == 1 and "Logging ld64 options" in stderr:|return namespace(KIND="ld64", LINKER_FLAG=linker_flag,)\n            if retcode == 1  and  "Logging ld64 options" in stderr:|' ./thunderbird-$THUNDERBIRD_VERSION/build/moz.configure/toolchain.configure

        if [ -x ./dev/apply_patches ]
        then
            ./dev/apply_patches
        fi
    fi

    cd ./thunderbird-$THUNDERBIRD_VERSION  ||  return 1

#  Mozconfig. Do not regenerate if already exist because it forces some recompilation and takes way more time.
    local mozconfig_var
    mozconfig_var="$mozconfig_var"'mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/obj-thunderbird-'"$CONF"$'\n'
    if [ "$CONF" = debug ]
    then
        mozconfig_var="$mozconfig_var"'mk_add_options MOZ_MAKE_FLAGS="-j1"'$'\n'
        mozconfig_var="$mozconfig_var"'ac_add_options --disable-strip'$'\n'
        mozconfig_var="$mozconfig_var"'ac_add_options --disable-install-strip'$'\n'
        mozconfig_var="$mozconfig_var"'ac_add_options --enable-debug'$'\n'
        mozconfig_var="$mozconfig_var"'ac_add_options --enable-debug-symbols'$'\n'
        mozconfig_var="$mozconfig_var"'ac_add_options --disable-optimize'$'\n'
    else
        mozconfig_var="$mozconfig_var"'mk_add_options MOZ_MAKE_FLAGS="-j5"'$'\n'
        mozconfig_var="$mozconfig_var"'ac_add_options --disable-debug'$'\n'
        mozconfig_var="$mozconfig_var"'ac_add_options --disable-debug-symbols'$'\n'
    fi
    mozconfig_var="$mozconfig_var"'ac_add_options --enable-clang-plugin'$'\n' # doesn't work (configure: error: Cannot find an llvm-config binary for building a clang plugin), but official builds have it. TODO
    mozconfig_var="$mozconfig_var"'ac_add_options --enable-js-shell'$'\n'
    mozconfig_var="$mozconfig_var"'ac_add_options --enable-official-branding'$'\n'
    mozconfig_var="$mozconfig_var"'ac_add_options --enable-project=comm/mail'$'\n'
    mozconfig_var="$mozconfig_var"'ac_add_options --enable-rust-simd'$'\n'
    mozconfig_var="$mozconfig_var"'ac_add_options --disable-updater'$'\n'
    mozconfig_var="$mozconfig_var"'ac_add_options --target=x86_64-apple-darwin'$'\n'
    mozconfig_var="$mozconfig_var"'ac_add_options --disable-crashreporter'$'\n' # Cannot run in Xcode if crashreporter is enabled.
    mozconfig_var="$mozconfig_var"'ac_add_options --disable-tests'$'\n'
    mozconfig_var="$mozconfig_var"'ac_add_options --disable-sandbox'$'\n'
    mozconfig_var="$mozconfig_var""ac_add_options --with-macos-sdk="$SCRIPT_DIR"/MacOSX"$MACOS_SDK_VERSION".sdk"$'\n'
    mozconfig_var="$mozconfig_var""ac_add_options --without-wasm-sandboxed-libraries"$'\n'

    mozconfig_var="$mozconfig_var"'unset MOZ_TELEMETRY_REPORTING'$'\n'

    current_mozconfig="$(< "$MOZCONFIG")"
    current_mozconfig="$current_mozconfig"$'\n' # command substitution remove trailing newline. Add it back

    if [[ "$mozconfig_var" != $current_mozconfig ]]; then
        echo update "$MOZCONFIG" file
        printf "$mozconfig_var" > "$MOZCONFIG"
    fi

#  Build
    ./mach build  ||  return 1
    ./mach package  ||  return 1

}

do_it "$@"

#Infos :
#  source : https://archive.mozilla.org/pub/thunderbird/releases/$THUNDERBIRD_VERSION/source/

#  see https://developer.thunderbird.net/thunderbird-development/building-thunderbird/macos-build-prerequisites
#  see https://developer.thunderbird.net/thunderbird-development/building-thunderbird
